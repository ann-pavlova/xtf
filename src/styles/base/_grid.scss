// DEPENDECIES
@import "./breakpoints";

// VARRIABLES

//max-width - 1920 || 100% || auto
//1920 - max width in number
//auto - max width = columns * columns width
//100% - max width in percent
$grid-max-width: 1920;

//number of columns
$grid-columns: 36;

//columns width
$grid-columns-width: 38;

// FUNCTION

//$number - {Number} - number
//@return - {String} - number in pixels
@function numberToPx($number) {
    @return $number * 1px;
}

//@return - {Number} - column width in percent
@function column($number:1, $of: $grid-columns) {
    // alias half
    @if $number == 'half' {
        @return percentage(1 / 2);
        // alias thrid
    } @else if $number == 'thrid' {
        @return percentage(1 / 3);
        // alias fourth
    } @else if $number == 'fourth' {
        @return percentage(1 / 4);
    } @else {
        @return percentage($number / $of);
    }
}

//$context - {Number} - context column count
//$column-count - {Number} - column count
//$gutter-width - {Number} -inter-column distance
//@return - {Percent} - column width in percent
@function subgrid($context, $column-count, $gutter-width) {
    // calculate column width - ((26 - 3) /4) = 5.75
    @return column(($context - ($column-count - 1)) / $column-count, $context);
}


// MIXINS

//create container - maximum width whole site and center
@mixin container($width: $grid-max-width) {
    margin-left: auto;
    margin-right: auto;

    @if $width == auto {
        max-width: numberToPx($grid-columns * $grid-columns-width);
    } @else if unit($width) == '%' {
        max-width: $width;
    } @else if type-of($width) == 'number' {
        max-width: numberToPx($width);
    }
}

//create flexbox row
@mixin row() {
    display: flex;
    flex-wrap: wrap;
}

//create columns
//$number - {Number} - number
//$of - {Number} - of number columns: default $grid-columns = 36
@mixin column($number: 1, $of: $grid-columns) {
    // alias half
    @if $number == 'half' {
        flex-basis: column(1, 2);
        max-width: column(1, 2);
        // alias thrid
    } @else if $number == 'thrid' {
        flex-basis: column(1, 3);
        max-width: column(1, 3);
        // alias fourth
    } @else if $number == 'fourth' {
        flex-basis: column(1, 4);
        max-width: column(1, 4);
    } @else {
        flex-basis: column($number, $of);
        max-width: column($number, $of);
    }

    flex-grow: 1;
    box-sizing: border-box;
}

//margin left
//$number - {Number} - number
//$of - {Number} - of number columns: default $grid-columns = 36
@mixin push($number, $of: $grid-columns) {
    margin-left: column($number, $of);
}

//margin right
//$number - {Number} - number
//$of - {Number} - of number columns: default $grid-columns = 36
@mixin post($number, $of: $grid-columns) {
    margin-right: column($number, $of);
}

//padding left
//$number - {Number} - number
//$of - {Number} - of number columns: default $grid-columns = 36
@mixin prefix($number, $of: $grid-columns) {
    padding-left: column($number, $of);
}

//padding right
//$number - {Number} - number
//$of - {Number} - of number columns: default $grid-columns = 36
@mixin suffix($number, $of: $grid-columns) {
    padding-right: column($number, $of);
}

//first column
@mixin start() {
    order: -9999;
}

//center column
@mixin center() {
    margin-left: auto;
    margin-right: auto;
}

//last column
@mixin end() {
    order: 9999;
}

//top column
@mixin top() {
    align-self: flex-start;
}

//middle column
@mixin middle() {
    align-self: center;
}

//bottom column
@mixin bottom() {
    align-self: flex-end;
}

//placeholder container
.container {
    @include container($grid-max-width);
}

//placeholder row
.row {
    @include row;
}